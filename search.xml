<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Mybatis之动态sql</title>
      <link href="/2020/04/11/Mybatis%E4%B9%8B%E5%8A%A8%E6%80%81sql(%E4%BA%94)/"/>
      <url>/2020/04/11/Mybatis%E4%B9%8B%E5%8A%A8%E6%80%81sql(%E4%BA%94)/</url>
      
        <content type="html"><![CDATA[<h3 id="if标签-where标签"><a href="#if标签-where标签" class="headerlink" title="if标签 where标签"></a>if标签 where标签</h3><ul><li>我们设想一个场景：<br>前端可能传来<strong>用户名</strong>，让后端查询用户<br>前端也可能传来<strong>用户名、用户地址</strong>，让后端查询用户<br>我们不确定有多少个<strong>参数条件</strong>，此时可以用动态SQL的<strong>if标签</strong>解决</li></ul><pre class=" language-XML"><code class="language-XML"><select id="FindBytj" parameterType="com.demo.maindao.User" resultType="com.demo.maindao.User">    select * from user    <where>        <if test="username != null and username!=''">            and username = #{username}        </if>        <if test="sex != null and sex!=''">            and sex = #{sex}        </if>    </where></select></code></pre><h3 id="foreach标签"><a href="#foreach标签" class="headerlink" title="foreach标签"></a>foreach标签</h3><pre class=" language-xml"><code class="language-xml"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>FindByids<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.demo.maindao.User<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.demo.maindao.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>select * from user<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ids!<span class="token punctuation">=</span>null and ids.size()<span class="token punctuation">></span>0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>foreach</span> <span class="token attr-name">collection</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ids<span class="token punctuation">"</span></span> <span class="token attr-name">open</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>and id in(<span class="token punctuation">"</span></span> <span class="token attr-name">close</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>)<span class="token punctuation">"</span></span> <span class="token attr-name">item</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">separator</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>,<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            #{id}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>foreach</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><p><img src="/2020/04/11/Mybatis%E4%B9%8B%E5%8A%A8%E6%80%81sql(%E4%BA%94)/QQ%E6%88%AA%E5%9B%BE20200411173249.png" alt></p><ul><li>标签用于遍历集合，它的属性如下：<br>collection：代表要遍历的集合元素<br>open：代表语句开始的部分<br>close：代表结束部分<br>item：代表遍历集合的每个元素，生成的变量名<br>sperator：代表分隔符</li></ul><h3 id="sql标签"><a href="#sql标签" class="headerlink" title="sql标签"></a>sql标签</h3><p>我们可以用<strong>sql标签</strong>抽取重复的sql语句</p><pre class=" language-xml"><code class="language-xml"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sql</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>defaultUser<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   select * from user    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sql</span><span class="token punctuation">></span></span></code></pre><p>然后引用即可</p><p><img src="/2020/04/11/Mybatis%E4%B9%8B%E5%8A%A8%E6%80%81sql(%E4%BA%94)/QQ%E6%88%AA%E5%9B%BE20200411173547.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> Mybatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis之连接池及事务</title>
      <link href="/2020/04/11/Mybatis%E4%B9%8B%E8%BF%9E%E6%8E%A5%E6%B1%A0%E5%8F%8A%E4%BA%8B%E5%8A%A1(%E5%9B%9B)/"/>
      <url>/2020/04/11/Mybatis%E4%B9%8B%E8%BF%9E%E6%8E%A5%E6%B1%A0%E5%8F%8A%E4%BA%8B%E5%8A%A1(%E5%9B%9B)/</url>
      
        <content type="html"><![CDATA[<h3 id="连接池介绍"><a href="#连接池介绍" class="headerlink" title="连接池介绍"></a>连接池介绍</h3><p>我们在实际开发中都会使用连接池<br>因为它可以减少我们获取连接所消耗的时间</p><p>连接池就是用于存储连接的一个容器<br>容器其实就是一个集合对象，该集合必须.是线程安全的,不能两个线程拿到统一连接该集合还必须实现队列的特性:先进先出</p><h3 id="连接池的分类"><a href="#连接池的分类" class="headerlink" title="连接池的分类"></a>连接池的分类</h3><p>mybatis连接池提供了3种方式的配置<br>配置的位置：<br>主配置文件SqlMapConfig.xml中的dataSource标签，type属性就是表示采用何种连接池方式<br>type属性的取值：</p><p>POOLED：采用传统的javax.sql.DataSource规范中的连接池，mybatis中有针对规范的实现<br>UNPOOLED：采用传统的获取连接的方式，虽然也实现了java.x.sql.DataSource接口，但是并没有使用池的思想；每次使用都重新获取一个连接<br>JNDI：采用服务器提供的JNDI技术实现，来获取DataSource对象，不同的服务器所能拿到的DataSource时不一样的<br>（注意：如果不是web或者maven的war工程，是不能使用的）</p><h3 id="pooled和unpooled的区别"><a href="#pooled和unpooled的区别" class="headerlink" title="pooled和unpooled的区别"></a><strong>pooled</strong>和unpooled的区别</h3><p><strong>pooled</strong>的话，是从连接池中获取<strong>连接对象</strong>，使用完之后会<strong>归还</strong><br>而使用了<strong>unpooled</strong>的话是自己创建，用完自己销毁</p><p>发现无论是<strong>pooled</strong>还是<strong>unpooled</strong>都实现了<strong>DataSource</strong>接口</p><h3 id="unpooled"><a href="#unpooled" class="headerlink" title="unpooled"></a>unpooled</h3><p><img src="/2020/04/11/Mybatis%E4%B9%8B%E8%BF%9E%E6%8E%A5%E6%B1%A0%E5%8F%8A%E4%BA%8B%E5%8A%A1(%E5%9B%9B)/QQ%E6%88%AA%E5%9B%BE20200411154202.png" alt></p><p><img src="/2020/04/11/Mybatis%E4%B9%8B%E8%BF%9E%E6%8E%A5%E6%B1%A0%E5%8F%8A%E4%BA%8B%E5%8A%A1(%E5%9B%9B)/QQ%E6%88%AA%E5%9B%BE20200411154225.png" alt></p><p>我们再回头看看<strong>UnpooledDataSource</strong>，发现它是直接把<strong>数据库连接信息</strong>传给<strong>DataSource</strong></p><p><img src="/2020/04/11/Mybatis%E4%B9%8B%E8%BF%9E%E6%8E%A5%E6%B1%A0%E5%8F%8A%E4%BA%8B%E5%8A%A1(%E5%9B%9B)/20200330005520848.png" alt></p><h3 id="pooled"><a href="#pooled" class="headerlink" title="pooled"></a>pooled</h3><p><img src="/2020/04/11/Mybatis%E4%B9%8B%E8%BF%9E%E6%8E%A5%E6%B1%A0%E5%8F%8A%E4%BA%8B%E5%8A%A1(%E5%9B%9B)/2020033017125545.png" alt></p><p><img src="/2020/04/11/Mybatis%E4%B9%8B%E8%BF%9E%E6%8E%A5%E6%B1%A0%E5%8F%8A%E4%BA%8B%E5%8A%A1(%E5%9B%9B)/QQ%E6%88%AA%E5%9B%BE20200411154634.png" alt></p><p>源码解读：</p><p>其中的synchronized是同步代码块，目的是确保线程安全；如果线程不安全，可能会出现两个线程拿到同一个连接<br>if(!state.idleConnections.isEmpty())中的idle是空闲的意思，该语句判断是否还有空闲的连接<br>其实idleConnections就是一个集合</p><ol><li>简而言之：还有空闲的连接，就<strong>用空闲的连接</strong>；没有的话就<strong>新建一个连接</strong></li><li>如果没有空闲的连接，在新建连接时发现<strong>活动连接数量</strong>等于<strong>最大允许数量</strong>，会获取活动连接池中<strong>最老的</strong>一个连接出来</li></ol><p><img src="/2020/04/11/Mybatis%E4%B9%8B%E8%BF%9E%E6%8E%A5%E6%B1%A0%E5%8F%8A%E4%BA%8B%E5%8A%A1(%E5%9B%9B)/QQ%E6%88%AA%E5%9B%BE20200411154901.png" alt></p><h3 id="事务原理和自动提交设置"><a href="#事务原理和自动提交设置" class="headerlink" title="事务原理和自动提交设置"></a>事务原理和自动提交设置</h3><p>mybatis是通过<strong>sqlsession对象</strong>的<code>commit()</code>方法和<code>rollback()方法</code>实现事务的<strong>提交</strong>和<strong>回滚</strong></p><p>因为mybatis帮我们把<strong>自动提交事务</strong>关闭了，所以我们需要<strong>手动提交事务</strong><br>我们的<strong>SqlSessionFactory</strong>提供的<code>openSession()</code>方法就可以开启自动提交事务</p><p>（我们之前一直用的是<strong>空参</strong>方法；它还有一个<strong>重载</strong>方法，可以设置<strong>自动提交事务</strong>）</p><p>sqlsession对象.openSession(true);   开启自动提交事务</p>]]></content>
      
      
      <categories>
          
          <category> Mybatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 连接池 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis扩展</title>
      <link href="/2020/04/11/Mybatis%E6%89%A9%E5%B1%95/"/>
      <url>/2020/04/11/Mybatis%E6%89%A9%E5%B1%95/</url>
      
        <content type="html"><![CDATA[<h1 id="properties标签的使用及细节"><a href="#properties标签的使用及细节" class="headerlink" title="properties标签的使用及细节"></a>properties标签的使用及细节</h1><p>我们之前的<strong>数据库连接信息</strong>是写在<strong>dataSource标签</strong>中的</p><p><img src="/2020/04/11/Mybatis%E6%89%A9%E5%B1%95/QQ%E6%88%AA%E5%9B%BE20200411145808.png" alt></p><p>我们还有另一种写法，就是写在<strong>properties标签</strong>中</p><p><img src="/2020/04/11/Mybatis%E6%89%A9%E5%B1%95/QQ%E6%88%AA%E5%9B%BE20200411145922.png" alt></p><p>我们可以进一步<strong>解耦</strong>，把properties标签抽取成一个外部文件，如下：<br>（此时写在外部文件，<code>&amp;</code>符号就无需转义了）</p><p><img src="/2020/04/11/Mybatis%E6%89%A9%E5%B1%95/QQ%E6%88%AA%E5%9B%BE20200411150050.png" alt></p><p><strong>resource</strong>属性用于指定配置文件的位置，是按照类路径的写法来写的，并且必须存在于类路径下<br>如果是放在类的根目录下，则可以直接写：<code>jdbcConfig.properties</code><br>我们看根目录，需要切换到<strong>Packages</strong>，如下：</p><p><img src="/2020/04/11/Mybatis%E6%89%A9%E5%B1%95/QQ%E6%88%AA%E5%9B%BE20200411150202.png" alt></p><p><img src="/2020/04/11/Mybatis%E6%89%A9%E5%B1%95/QQ%E6%88%AA%E5%9B%BE20200411150257.png" alt></p><p>最后注意两者的名字要一一对应</p><p><img src="/2020/04/11/Mybatis%E6%89%A9%E5%B1%95/QQ%E6%88%AA%E5%9B%BE20200411150329.png" alt></p><p>想要使用properties标签引入外部文件，除了可以使用resource属性以外，还可以使用url<br>URL属性要求按照URL的写法来写地址<br>URL的全称是：Uniform Resource Locator 统一资源定位符，统一资源定位符<br>它可以唯一标识一个资源的位置<br>写法：协议 主机 端口 URI<br>如：<a href="http://localhost:8080/demo01" target="_blank" rel="noopener">http://localhost:8080/demo01</a><br>而URI的全称是：Uniform Resource Identifier，统一资源标识符<br>它可以在应用中唯一定位资源</p><h1 id="typeAliases标签和package标签"><a href="#typeAliases标签和package标签" class="headerlink" title="typeAliases标签和package标签"></a>typeAliases标签和package标签</h1><p>我们之前在<strong>IUserDao.xml</strong>提到过parameterType标签可以取多个值，效果都一样<br>这是因为mybatis帮我们取了<strong>别名</strong></p><p><img src="/2020/04/11/Mybatis%E6%89%A9%E5%B1%95/QQ%E6%88%AA%E5%9B%BE20200411150525.png" alt></p><p>我们自己也可以用<strong>typeAliases标签</strong>取别名，但是它只能配置<strong>domain</strong>中类的别名</p><p><img src="/2020/04/11/Mybatis%E6%89%A9%E5%B1%95/QQ%E6%88%AA%E5%9B%BE20200411150658.png" alt></p><p><strong>type属性</strong>指定的是<strong>实体类全限定类名</strong>，而<strong>alias属性</strong>指定<strong>别名</strong>，并且当指定了别名就不再区分大小写了</p><p>我们配置完别名，就可以到优化代码了</p><p>优化前：</p><p><img src="/2020/04/11/Mybatis%E6%89%A9%E5%B1%95/QQ%E6%88%AA%E5%9B%BE20200411151009.png" alt></p><p>优化后：</p><p><img src="/2020/04/11/Mybatis%E6%89%A9%E5%B1%95/20200329202416784.png" alt></p><p>但是如果需要配置的<strong>别名</strong>过多，会很麻烦<br>我们可以用<strong>package标签</strong>，一次性完成配置</p><p>package标签用于指定要配置的别名的<strong>包</strong><br>当指定之后，该包下的实体类<strong>都会注册别名</strong>，并且<strong>类名就是别名</strong>，不再区分大小写</p><p><img src="/2020/04/11/Mybatis%E6%89%A9%E5%B1%95/QQ%E6%88%AA%E5%9B%BE20200411151445.png" alt></p><p><strong>mappers标签</strong>也可以使用<strong>package标签</strong><br>当package标签指定了<strong>dao接口</strong>所在的包时，就不需要再写mapper以及resource（或url）或者class了</p><p>优化前：</p><p><img src="/2020/04/11/Mybatis%E6%89%A9%E5%B1%95/20200329203450679.png" alt></p><p>优化后：</p><p><img src="/2020/04/11/Mybatis%E6%89%A9%E5%B1%95/20200329203522288.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> Mybatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 扩展 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis执行分析</title>
      <link href="/2020/04/09/MyBatis%E6%89%A7%E8%A1%8C%E5%88%86%E6%9E%90(%E4%B8%89)/"/>
      <url>/2020/04/09/MyBatis%E6%89%A7%E8%A1%8C%E5%88%86%E6%9E%90(%E4%B8%89)/</url>
      
        <content type="html"><![CDATA[<h3 id="一-执行查询所有的分析"><a href="#一-执行查询所有的分析" class="headerlink" title="(一)执行查询所有的分析"></a>(一)执行查询所有的分析</h3><p>mybatis在使用代理dao的方式实现增删改查时做了两件事：<br>第一，创建代理对象<br>第二，使用代理对象调用selectList</p><p><img src="/2020/04/09/MyBatis%E6%89%A7%E8%A1%8C%E5%88%86%E6%9E%90(%E4%B8%89)/QQ%E6%88%AA%E5%9B%BE20200409204911.png" alt></p><h3 id="二-创建代理对象的分析"><a href="#二-创建代理对象的分析" class="headerlink" title="(二)创建代理对象的分析"></a>(二)创建代理对象的分析</h3><p><img src="/2020/04/09/MyBatis%E6%89%A7%E8%A1%8C%E5%88%86%E6%9E%90(%E4%B8%89)/QQ%E6%88%AA%E5%9B%BE20200409205030.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> Mybatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分析MyBatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis之CRUD操作</title>
      <link href="/2020/04/09/Mybatis%E4%B9%8BCRUD%E6%93%8D%E4%BD%9C(%E4%BA%8C)/"/>
      <url>/2020/04/09/Mybatis%E4%B9%8BCRUD%E6%93%8D%E4%BD%9C(%E4%BA%8C)/</url>
      
        <content type="html"><![CDATA[<h2 id="添加用户"><a href="#添加用户" class="headerlink" title="添加用户"></a>添加用户</h2><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>SaveUser<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.demo.maindao.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>insert  into user(username,birthday,sex,address)values(#{username},#{birthday},#{sex},#{address})<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>selectKey</span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span> <span class="token attr-name">keyProperty</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">keyColumn</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">order</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>AFTER<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>select last_insert_id()<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>selectKey</span><span class="token punctuation">></span></span></code></pre><p>持久层接口类：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">void</span>  <span class="token function">SaveUser</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>测试：</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">private</span>  InputStream in<span class="token punctuation">;</span>    <span class="token keyword">private</span> SqlSession sqlSession<span class="token punctuation">;</span>    <span class="token keyword">private</span> Iuser iuser<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Before</span>    <span class="token keyword">public</span>  <span class="token keyword">void</span>  <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span>  Exception    <span class="token punctuation">{</span>         in<span class="token operator">=</span> Resources<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"/SqlMapConfig.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         SqlSessionFactoryBuilder builder<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         SqlSessionFactory Factory <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>         sqlSession<span class="token operator">=</span>Factory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         iuser<span class="token operator">=</span>sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>Iuser<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@After</span>    <span class="token keyword">public</span>  <span class="token keyword">void</span> <span class="token function">ShiFang</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span>  Exception    <span class="token punctuation">{</span>        sqlSession<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        in<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token annotation punctuation">@Test</span><span class="token keyword">public</span>  <span class="token keyword">void</span> <span class="token function">SaveUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span>  Exception<span class="token punctuation">{</span> User user<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> user<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> user<span class="token punctuation">.</span><span class="token function">setAddress</span><span class="token punctuation">(</span><span class="token string">"bj"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> Date date<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> user<span class="token punctuation">.</span><span class="token function">setBirthday</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span> user<span class="token punctuation">.</span><span class="token function">setSex</span><span class="token punctuation">(</span><span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> iuser<span class="token punctuation">.</span><span class="token function">SaveUser</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>添加用户并且返回新添加数据的ID</p><p>parameterType：参数的类型</p><p>resultType：返回值类型</p><p>keyProperty：实体类属性名</p><p>keyColumn：数据库列名</p><p>order：AFTER:在之前查询，BEFOR:在之后查询</p><p>select last_insert_id()： 查询刚添加数据的ID  </p><h2 id="修改用户"><a href="#修改用户" class="headerlink" title="修改用户"></a>修改用户</h2><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UpdateUser<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.demo.maindao.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>update  user  set username=#{username},address=#{address},sex=#{sex},birthday=#{birthday} where id=#{id}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">></span></span></code></pre><p>持久层接口：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">UpdateUser</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h2><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delete</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>DeleteByID<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>delete from user where id=#{uid}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>delete</span><span class="token punctuation">></span></span></code></pre><p>持久层接口：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">DeleteByID</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="查询一个及模糊查询"><a href="#查询一个及模糊查询" class="headerlink" title="查询一个及模糊查询"></a>查询一个及模糊查询</h2><p><img src="/2020/04/09/Mybatis%E4%B9%8BCRUD%E6%93%8D%E4%BD%9C(%E4%BA%8C)/QQ%E6%88%AA%E5%9B%BE20200409203733.png" alt></p><p><img src="/2020/04/09/Mybatis%E4%B9%8BCRUD%E6%93%8D%E4%BD%9C(%E4%BA%8C)/QQ%E6%88%AA%E5%9B%BE20200409203853.png" alt></p><p><img src="/2020/04/09/Mybatis%E4%B9%8BCRUD%E6%93%8D%E4%BD%9C(%E4%BA%8C)/QQ%E6%88%AA%E5%9B%BE20200409204047.png" alt></p><h2 id="使用实体类的包装对象作为查询条件"><a href="#使用实体类的包装对象作为查询条件" class="headerlink" title="使用实体类的包装对象作为查询条件"></a>使用实体类的包装对象作为查询条件</h2><p>OGNL表达式：<br>全称是Object Graphic Navigation Language<br>意思是对象图导航语言<br>它是通过对象的取值方法来获取数据，在写法上把get给省略了<br>比如说：我们获取用户的名称<br>普通的写法：user.getUsername()<br>OGNL表达式的写法：user.username</p><p>我们思考一下mybatis中为什么能直接写username，而不使用上面的普通写法呢？<br>因为parameterType中已经提供了属性所属的类，所以此时不需要写对象名</p><p><img src="/2020/04/09/Mybatis%E4%B9%8BCRUD%E6%93%8D%E4%BD%9C(%E4%BA%8C)/QQ%E6%88%AA%E5%9B%BE20200411143252.png" alt></p><p>mybatis基于OGNL表达式做了进一步的简化，连对象都不用写，更方便</p><p>我们先在domain创建一个<strong>QueryVo</strong>类<br><strong>QueryVo.java</strong>：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QueryVo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> User <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> user<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUser</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>user <span class="token operator">=</span> user<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> User user<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>Iuserdao.java:</p><pre class=" language-java"><code class="language-java">List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">FindByName</span><span class="token punctuation">(</span>QueryVo vo<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>IUserDao.xml</strong>：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>FindByName<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.demo.maindao.QueryVo<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.demo.maindao.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>select  * from user  where username like #{user.username}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><p>测试类：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span>  <span class="token keyword">void</span>  <span class="token function">FindByName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    QueryVo vo<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">QueryVo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    User user<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"%王%"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    vo<span class="token punctuation">.</span><span class="token function">setUser</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>User<span class="token operator">></span> users<span class="token operator">=</span>iuser<span class="token punctuation">.</span><span class="token function">FindByName</span><span class="token punctuation">(</span>vo<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>User u<span class="token operator">:</span>users<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="返回值深入"><a href="#返回值深入" class="headerlink" title="返回值深入"></a>返回值深入</h2><p>我们之前说过<strong>实体类的属性名</strong>一定要跟<strong>数据库的字段名</strong>一致<br>如果我们非要不一样呢</p><p>第一种方式：<strong>起别名</strong></p><pre class=" language-xml"><code class="language-xml">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>findAll<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.zzq.domain.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select            id as userid,            username as username,            address as useraddress,            birthday as userbirthday,            sex as usersex         from            user;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><p>将数据库查询出来的数据列明跟实体类属性名称对应即可；</p><p><strong>优点  **  执行效率高</strong>，**开发效率低  </p><p>第二种方式<strong>不需要起别名</strong>，我们采用<strong>配置的方式</strong></p><p><img src="/2020/04/09/Mybatis%E4%B9%8BCRUD%E6%93%8D%E4%BD%9C(%E4%BA%8C)/QQ%E6%88%AA%E5%9B%BE20200411144633.png" alt></p><p><strong>resultMap</strong>标签的id属性是可以随便取的，只是起到唯一标识的作用</p><p><strong>property</strong> 属性是实体类属性名称  <strong>colum</strong> 属性对应数据库列名</p><p>我们去掉select标签的<strong>resultType</strong>属性，取而代之的是<strong>resultMap</strong></p><p><img src="/2020/04/09/Mybatis%E4%B9%8BCRUD%E6%93%8D%E4%BD%9C(%E4%BA%8C)/QQ%E6%88%AA%E5%9B%BE20200411145011.png" alt></p><p>  <strong>优点与第一种方式相反</strong></p>]]></content>
      
      
      <categories>
          
          <category> Mybatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CRUD </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis环境配置</title>
      <link href="/2020/04/08/Mybatis%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE(%E4%B8%80)/"/>
      <url>/2020/04/08/Mybatis%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE(%E4%B8%80)/</url>
      
        <content type="html"><![CDATA[<h3 id="创建Maven工程"><a href="#创建Maven工程" class="headerlink" title="创建Maven工程"></a>创建Maven工程</h3><h3 id="添加依赖项"><a href="#添加依赖项" class="headerlink" title="添加依赖项"></a>添加依赖项</h3><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- Mybatis依赖项--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.4.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- mysql依赖项--></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>8.0.19<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 单元测试依赖项--></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!--日志依赖项--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h3 id="创建实体类"><a href="#创建实体类" class="headerlink" title="创建实体类"></a>创建实体类</h3><p><strong>注意 ：实体类要继承 Serializable接口并且类名字段名要和数据库表明字段名对应</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>maindao<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Serializable<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span>  <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span>  String username<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> username<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUsername</span><span class="token punctuation">(</span>String username<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>username <span class="token operator">=</span> username<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Date <span class="token function">getBirthday</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> birthday<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBirthday</span><span class="token punctuation">(</span>Date birthday<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>birthday <span class="token operator">=</span> birthday<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> sex<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSex</span><span class="token punctuation">(</span>String sex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> address<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAddress</span><span class="token punctuation">(</span>String address<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>address <span class="token operator">=</span> address<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> Date birthday<span class="token punctuation">;</span>    <span class="token keyword">private</span>  String sex<span class="token punctuation">;</span>    <span class="token keyword">private</span>  String address<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"User{"</span> <span class="token operator">+</span>                <span class="token string">"id="</span> <span class="token operator">+</span> id <span class="token operator">+</span>                <span class="token string">", username='"</span> <span class="token operator">+</span> username <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", birthday="</span> <span class="token operator">+</span> birthday <span class="token operator">+</span>                <span class="token string">", sex='"</span> <span class="token operator">+</span> sex <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", address='"</span> <span class="token operator">+</span> address <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="创建相应的dao类接口"><a href="#创建相应的dao类接口" class="headerlink" title="创建相应的dao类接口"></a>创建相应的dao类接口</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>dao<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>maindao<span class="token punctuation">.</span>User<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Iuser</span> <span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">FindAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="创建Mybatis的主配置文件"><a href="#创建Mybatis的主配置文件" class="headerlink" title="创建Mybatis的主配置文件"></a>创建Mybatis的主配置文件</h3><p><img src="/2020/04/08/Mybatis%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE(%E4%B8%80)/QQ%E6%88%AA%E5%9B%BE20200408172837.png" alt></p><p>文件内容：</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token doctype">&lt;!DOCTYPE configuration PUBLIC "-//mybatis.org//DTD Config 3.0//EN" "http://mybatis.org/dtd/mybatis-3-config.dtd"></span><span class="token comment" spellcheck="true">&lt;!--mybatis的主配置文件--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environments</span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mysql<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         <span class="token comment" spellcheck="true">&lt;!-- 配置mysql的环境--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mysql<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>              <span class="token comment" spellcheck="true">&lt;!--            配置事务的类型--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>JDBC<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transactionManager</span><span class="token punctuation">></span></span>               <span class="token comment" spellcheck="true">&lt;!--            配置数据源（连接池）--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>POOLED<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                   <span class="token comment" spellcheck="true">&lt;!--                配置连接数据库的4个基本信息--></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mysql.jdbc.Driver<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbc:mysql://localhost:3306/Test?useUnicode<span class="token punctuation">=</span>true&amp;amp;characterEncoding<span class="token punctuation">=</span>utf-8&amp;amp;useSSL<span class="token punctuation">=</span>false&amp;amp;serverTimezone<span class="token punctuation">=</span>UTC<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>123456<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environments</span><span class="token punctuation">></span></span>     <span class="token comment" spellcheck="true">&lt;!--    指定映射配置文件的位置，映射配置文件指定的是每个dao独立的配置文件--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com/demo/dao/Iuser.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span></code></pre><h3 id="新建dao的配置文件"><a href="#新建dao的配置文件" class="headerlink" title="新建dao的配置文件"></a>新建dao的配置文件</h3><p>按照 <strong>resource</strong> 属性所指的路径新建配置文件  </p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token doctype">&lt;!DOCTYPE mapper        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"></span><span class="token comment" spellcheck="true">&lt;!--namespace是指dao接口的全限定类名--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.demo.dao.Iuser<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>       <span class="token comment" spellcheck="true">&lt;!--resultType是查询要返回的类型  id是dao类接口的方法名称 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>FindAll<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.demo.maindao.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>select *  from user <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span></code></pre><h3 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyBatisTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1.读取配置文件</span>        InputStream in <span class="token operator">=</span> Resources<span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"/SqlMapConfig.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//读取不到是因为路径不对 </span>        <span class="token comment" spellcheck="true">//2.创建SqlSessionFactory工厂</span>        SqlSessionFactoryBuilder builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        SqlSessionFactory factory <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3.使用工厂生成SqlSession对象</span>        SqlSession session <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//4.使用SqlSession创建Dao接口的代理对象（动态代理，增强方法功能，使得接口的空方法可以实现需求）</span>        IUserDao userDao <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>IUserDao<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//5.使用代理对象执行方法(方法已经被增强过了，可以实现需求)</span>        List<span class="token operator">&lt;</span>User<span class="token operator">></span> users <span class="token operator">=</span> userDao<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>User user <span class="token operator">:</span> users<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//6.释放资源</span>        session<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        in<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li><strong>总结：</strong><br><strong>第一步，创建maven工程并导入坐标</strong><br><strong>第二步，创建实体类和dao的接口</strong><br><strong>第三步，创建mybatis的主配置文件（SqlMapConfig.xml）</strong><br><strong>第四步，创建映射配置文件（IUserDao.xml）</strong></li></ul><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ol><li>创建 IUserDao.xml和 IUserDao.java时，起名为Dao是为了和我们之前的知识保持一致。<br>在mybatis中，它把持久层的操作接口名称和映射文件也叫：Mapper<br>所以如果看到IUserMapper.java其实跟IUserDao.java是一样的<br>xml也同理</li><li>在IDEA中创建<strong>目录</strong>（directory）的时候，跟包是不一样的<br>包在创建时：com.zzq.dao 它是<strong>三层结构</strong><br>目录在创建时：com.zzq.dao 它是<strong>一层结构</strong></li><li>mybatis的映射配置文件位置必须和dao接口的包结构相同<br>所以我们才需要目录的三层结构</li><li>映射配置文件的mapper标签namespace属性的取值必须是dao接口的全限定类名</li><li>映射配置文件的操作配置（select xxx），id属性的取值必须是dao接口的方法名</li></ol>]]></content>
      
      
      <categories>
          
          <category> Mybatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IO操作</title>
      <link href="/2020/04/06/IO%E6%93%8D%E4%BD%9C/"/>
      <url>/2020/04/06/IO%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="IO学习笔记"><a href="#IO学习笔记" class="headerlink" title="IO学习笔记"></a>IO学习笔记</h1><h3 id="File类"><a href="#File类" class="headerlink" title="File类"></a>File类</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>*<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//文件操作类</span></code></pre><pre class=" language-java"><code class="language-java">File file<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"e:\\text.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//打开文件</span><span class="token comment" spellcheck="true">//常用方法</span><span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 创建单级目录</span><span class="token function">mkdirs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 创建多级目录</span>exists（）<span class="token comment" spellcheck="true">//判断文件是否存在</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//删除</span></code></pre><h2 id="以字节流读写文件"><a href="#以字节流读写文件" class="headerlink" title="以字节流读写文件"></a>以字节流读写文件</h2><h3 id="FileOutputStream-输出流和FileInputStream-输入流"><a href="#FileOutputStream-输出流和FileInputStream-输入流" class="headerlink" title="FileOutputStream 输出流和FileInputStream 输入流"></a>FileOutputStream 输出流和FileInputStream 输入流</h3><p>这两个类都是分别继承自抽象类OutputStream 和 InputStream，以字节流的形式读写文件。</p><p>例：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span>   <span class="token keyword">void</span> <span class="token function">FileStreamDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    File file<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"e:\\text.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//打开文件</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>         FileOutputStream FOS<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//创建输出流对象 true代表以追加模式打开文件 默认false;</span>        java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>String str<span class="token operator">=</span><span class="token string">"Helloworld"</span><span class="token punctuation">;</span>        FOS<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//将字符串转换为数组写入输出流</span>        FOS<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        InputStream is<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//创建输入流对象</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> by<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len<span class="token operator">=</span>is<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>by<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>by<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>  </code></pre><h3 id="BufferedOutputStream和BufferedInputStream"><a href="#BufferedOutputStream和BufferedInputStream" class="headerlink" title="BufferedOutputStream和BufferedInputStream"></a>BufferedOutputStream和BufferedInputStream</h3><p><strong>带内存缓冲区的文件读写流。</strong></p><p>例：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span>   <span class="token keyword">void</span>  <span class="token function">BufferedInOutStreaemDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        File file1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"e:\\text.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//打开文件.</span>        File file2<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"e:\\demo.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//打开文件.</span>        BufferedOutputStream bfout<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>file2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        BufferedInputStream  bfin<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>file1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> by<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//在输入流没有关闭之前 这里的每次循环是继续上次没有读到的地方的开始。 只到读完返回-1  循环结束。</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>bfin<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>by<span class="token punctuation">)</span><span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//如果已经到达文件末尾没有更多的数据 返回-1</span>        <span class="token punctuation">{</span>            bfout<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>by<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        bfout<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//强制输出缓存区中的数据  也就是将内从的中数据写入文件。</span>        bfin<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bfout<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> </code></pre><h2 id="以字符流读写文件"><a href="#以字符流读写文件" class="headerlink" title="以字符流读写文件"></a>以字符流读写文件</h2><h3 id="FileReader和FileWriter"><a href="#FileReader和FileWriter" class="headerlink" title="FileReader和FileWriter"></a>FileReader和FileWriter</h3><p>这两个类分别继承自抽象类Reader和Writer</p><p>例：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span>  <span class="token keyword">void</span> <span class="token function">FileReadDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        File file<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"e:\\demo.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//打开文件</span>        FileWriter fw<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>        fw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"Helloworld"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        fw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        FileReader fr<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> by<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">char</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len<span class="token operator">=</span> fr<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>by<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>by<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="序列化和反序列化"><a href="#序列化和反序列化" class="headerlink" title="序列化和反序列化"></a>序列化和反序列化</h2><p>需要序列化的对象 必须实现Serializable接口，此接口没有定义如何方法，又称为标识接口。</p><p>需要用的的两个类：ObjectOutputStream 、ObjectInputStream；</p><p>例：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span>  <span class="token class-name">Student</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Student{"</span> <span class="token operator">+</span>                <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", age="</span> <span class="token operator">+</span> age <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    String name<span class="token punctuation">;</span>     <span class="token keyword">int</span> age<span class="token punctuation">;</span>     <span class="token keyword">public</span>  <span class="token function">Student</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span><span class="token keyword">int</span> age<span class="token punctuation">)</span>     <span class="token punctuation">{</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name<span class="token punctuation">;</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token operator">=</span>age<span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//序列化</span> <span class="token keyword">public</span>  <span class="token keyword">static</span>  <span class="token keyword">void</span> <span class="token function">xuliehua</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            File file<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"e:\\text.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//打开文件</span>            FileOutputStream fs<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>            ObjectOutputStream oos<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>fs<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//构造方法需要传入OutputStream 对象 这里传入他的子类对象 FileOutputStream 对象。</span>            oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            fs<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            oos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//反序列化</span> <span class="token keyword">public</span>  <span class="token keyword">static</span>  <span class="token keyword">void</span> <span class="token function">Fanxuliehua</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            File file<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"e:\\text.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//打开文件</span>            FileInputStream fi<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>            ObjectInputStream ois<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span>fi<span class="token punctuation">)</span><span class="token punctuation">;</span>            Object obj<span class="token operator">=</span>ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Student stu<span class="token operator">=</span><span class="token punctuation">(</span>Student<span class="token punctuation">)</span>obj<span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stu<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            fi<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ois<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> IO操作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDBC学习笔记</title>
      <link href="/2020/04/05/JDBC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2020/04/05/JDBC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="JDBC学习笔记"><a href="#JDBC学习笔记" class="headerlink" title="JDBC学习笔记"></a>JDBC学习笔记</h1><ol><li><strong>IDEA 引包</strong></li></ol><img src="/2020/04/05/JDBC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20200405181940819.png" alt="image-20200405181940819"><p><img src="/2020/04/05/JDBC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20200405182037962.png" alt="image-20200405182037962"></p><ol start="2"><li><strong>导入SQL操作类</strong></li></ol><p><img src="/2020/04/05/JDBC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/C:%5CUsers%5CAdministrator.USER-20200328BI%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200405182311805.png" alt="image-20200405182311805"></p><ol start="3"><li><p><strong>加载数据库驱动</strong></p><pre class=" language-java"><code class="language-java">Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>类名<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//使用Class.forName(类名);加载数据库驱动</span></code></pre><p><img src="/2020/04/05/JDBC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20200405182549807.png" alt="image-20200405182549807"></p></li></ol><p>3.1 <strong>可能会出现的错误</strong></p><p><img src="/2020/04/05/JDBC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20200405183213256.png" alt="image-20200405183213256"></p><ol start="4"><li><p><strong>创建数据库连接对象</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">static</span> String Url<span class="token operator">=</span><span class="token string">"jdbc:sqlserver://localhost:1433;DataBaseName=StudentDB"</span><span class="token punctuation">;</span><span class="token keyword">static</span> String username<span class="token operator">=</span><span class="token string">"sa"</span><span class="token punctuation">;</span><span class="token keyword">static</span>  String Pwd<span class="token operator">=</span><span class="token string">"123456"</span><span class="token punctuation">;</span>Connection conn<span class="token operator">=</span>DriverManager<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>Url<span class="token punctuation">,</span>username<span class="token punctuation">,</span>Pwd<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>  使用Connection对象的prepareStatement方法(此方法可以传递一个预编译的sql语句) </p><p>   例如：<code>PreparedStatement ps=conn.prepareStatement(&quot;insert into student values(？,？,？)&quot;);</code></p><p>  “？”号 是占位符  可以通过 ps.setXxx(占位符位置（从1开始），值) 来填充sql里的?号，Xxx表示填充的数据类型；</p></li></ol><p>   得到PreparedStatement对象来操作数据库</p><pre><code> PreparedStatement对象的executeQuery方法用于查询 返回值类型是ResultSet; </code></pre><p>   ​        ResultSet对象的使用方法：</p><p>   ​                getString()</p><p>   ​                getInt()</p><p>   PreparedStatement对象的execute方法用于增删改 返回值类型 boolean;</p><p>   5 . <strong>封装数据库操作类</strong></p><pre class=" language-java"><code class="language-java">   <span class="token keyword">package</span>  com<span class="token punctuation">;</span>   <span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>URL<span class="token punctuation">;</span>   <span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>*<span class="token punctuation">;</span>   <span class="token keyword">public</span>  <span class="token keyword">class</span> <span class="token class-name">DBhelper</span>   <span class="token punctuation">{</span>       <span class="token keyword">static</span> String Url<span class="token operator">=</span><span class="token string">"jdbc:sqlserver://localhost:1433;DataBaseName=StudentDB"</span><span class="token punctuation">;</span>       <span class="token keyword">static</span> String username<span class="token operator">=</span><span class="token string">"sa"</span><span class="token punctuation">;</span>       <span class="token keyword">static</span>  String Pwd<span class="token operator">=</span><span class="token string">"123456"</span><span class="token punctuation">;</span>       <span class="token keyword">static</span> String driver<span class="token operator">=</span><span class="token string">"com.microsoft.sqlserver.jdbc.SQLServerDriver"</span><span class="token punctuation">;</span>       <span class="token keyword">public</span>  <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">LoadeDrive</span><span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token punctuation">{</span>           <span class="token keyword">try</span> <span class="token punctuation">{</span>               Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>driver<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>               e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>       <span class="token punctuation">}</span>       <span class="token keyword">public</span> <span class="token keyword">static</span>   <span class="token keyword">boolean</span> <span class="token function">Execute</span><span class="token punctuation">(</span>String sql<span class="token punctuation">)</span>       <span class="token punctuation">{</span>           <span class="token keyword">try</span> <span class="token punctuation">{</span>               Connection conn<span class="token operator">=</span>DriverManager<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>Url<span class="token punctuation">,</span>username<span class="token punctuation">,</span>Pwd<span class="token punctuation">)</span><span class="token punctuation">;</span>               PreparedStatement pr<span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>               pr<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               pr<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               conn<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>               e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token keyword">return</span>  <span class="token boolean">false</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>       <span class="token punctuation">}</span>       <span class="token keyword">public</span> <span class="token keyword">static</span>  ResultSet <span class="token function">GetSet</span><span class="token punctuation">(</span>String sql<span class="token punctuation">)</span>       <span class="token punctuation">{</span>           <span class="token keyword">try</span> <span class="token punctuation">{</span>               Connection conn<span class="token operator">=</span>DriverManager<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>Url<span class="token punctuation">,</span>username<span class="token punctuation">,</span>Pwd<span class="token punctuation">)</span><span class="token punctuation">;</span>               PreparedStatement ps<span class="token operator">=</span>conn<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token keyword">return</span>  ps<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>               e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token keyword">return</span>  null<span class="token punctuation">;</span>           <span class="token punctuation">}</span>       <span class="token punctuation">}</span>   <span class="token punctuation">}</span></code></pre><p>6 . <strong>可滚动结果集</strong></p><pre class=" language-JAVA"><code class="language-JAVA">PreparedStatement ps=conn.prepareStatement(sql,ResultSet.TYPE_SCROLL_SENSITIVE,ResultSet.CONCUR_READ_ONLY);//CONCUR_READ_ONLY 表示结果集并发类型为只读，不允许修改   ResultSet.CONCUR_UPDATABLE//表示可修改结果集Result rst=ps.executeQuery();rst.absoute(3)//表示定位至结果集第3条记录rst.previous() //定位至当前记录的上一条记录rst.next()//定位至当前记录的下一条记录rst.first()//定位至的第一条记录rst.last()//定位至的最后一条记录 res.moveToInsertRow(); //移动到待插入的行res.updateString("name","d");  //插入数据res.insertRow();  //提交到结果集和数据库res.absolute(2);  //定位到第二行res.updateInt("age",18);  //更新第二行数据res.updateRow();  //提交更新</code></pre>]]></content>
      
      
      <categories>
          
          <category> JDBC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
